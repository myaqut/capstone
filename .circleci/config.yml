version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            echo capstone-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}



jobs:



  lint : 
    docker:

      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name : lint docker file 
          command : |
            apk add --update openssl
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            ./hadolint Dockerfile

  build:

    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: Build application Docker image
          command: |
            docker build  -t yaqot/nginixapp .
            docker image ls
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o nginixapp.tar yaqot/nginixapp

      - persist_to_workspace:
          root: .
          paths:
            - ./nginixapp.tar
  test:
      docker:
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Load  the container 
            command: |
              docker load -i /tmp/workspace/nginixapp.tar
        - run:
            name: Run  the container 
            command: |

              ./run_docker.sh
              docker image ls
              docker container ls 
              echo container running
  publish-latest-docker-image:
      docker:
        - image: circleci/buildpack-deps:stretch

      steps:
        - setup_remote_docker
        - attach_workspace:
            at: /tmp/workspace

        - run:
            name: Load  the container 
            command: |
              docker load -i /tmp/workspace/nginixapp.tar

        - run:
            name: Publish Docker Image to Docker Hub
            command: |
             echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

             docker push yaqot/nginixapp

  
  create-cluster:
     docker:
        - image: 'cimg/python:3.10'
     parameters:
       cluster-name:
         description: |
           udacity-capstone
         type: string
     steps:
       - checkout
       - aws-eks/install-aws-iam-authenticator:
           release-tag: ''
       - aws-eks/create-cluster:
           cluster-name: << parameters.cluster-name >>
           skip-kubectl-install: false
           verbose: 3
           node-type: t2.micro
           nodes-max: 2
           ssh-access: false
           ssh-public-key: ''
  
  
  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>

      - run:
          command: |
            kubectl get services
          name: Test cluster
  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: eks_deployment.yml
          resource-name: deployment/udacity-capstone


workflows:
  Default:
    jobs:
      - lint 
      - build:
          requires:
            - lint
      - test : 
          requires:
            - build
      - publish-latest-docker-image : 
          requires:
            - build
      # - create-cluster:
      #     cluster-name: udacity-capstone
      - create-deployment:
          cluster-name: udacity-capstone
      - test-cluster : 
          cluster-name: udacity-capstone
          requires:
            - create-deployment