version: 2.1

commands:
  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            echo capstone-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}



jobs:
  build:

    docker:
      - image: docker:17.05.0-ce-git

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name : lint docker file 
          command : |
            apk add --update openssl
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            hadolint Dockerfile
      - run:
          name: Build application Docker image
          command: |
            docker build  -t nginixapp .
            docker image ls
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o nginixapp.tar nginixapp

      - persist_to_workspace:
          root: .
          paths:
            - ./nginixapp.tar
  test:
      docker:
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Load  the container 
            command: |
              docker load -i /tmp/workspace/nginixapp.tar
        - run:
            name: Run  the container 
            command: |

              ./run_docker.sh
              docker image ls
              docker container ls 

  publish-latest-docker-image:
      docker:
        - image: circleci/buildpack-deps:stretch

      steps:
        - setup_remote_docker
        - attach_workspace:
            at: /tmp/workspace

        - run:
            name: Load  the container 
            command: |
              docker load -i /tmp/workspace/nginixapp.tar

        - run:
            name: Publish Docker Image to Docker Hub
            command: |
             echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

             docker push yaqot/nginixapp:latest

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run: 
          name : get old infrastructure ID 
          command : |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo $OldWorkflowID >>  .circleci/oldinf.txt
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-projec-capstone \
              --stack-name "capstone-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backendIP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=capstone-${CIRCLE_WORKFLOW_ID} \
            --output text)
            echo capstone-${CIRCLE_WORKFLOW_ID}
            echo $backendIP
            echo $backendIP >> .circleci/ansible/inventory.txt
            echo $backendIP >> .circleci/ansible/backendip.txt
            # add workflow ID here
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID}   


      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/backendip.txt
            - project/.circleci/oldinf.txt
              # Here's where you will add some code to rollback on failure     
  prepare-backend:
    docker:
      - image: cimg/aws:2022.06

    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "cd:3e:dc:96:61:96:cb:85:d5:d5:6e:92:b8:6c:66:d5"
      
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
            sudo apt update


      - run:
          name: Deploy backend and run ansible
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml


      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID}   

  smoke-test:
    docker:
      - image: cimg/aws:2022.06

    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "cd:3e:dc:96:61:96:cb:85:d5:d5:6e:92:b8:6c:66:d5"
      
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
            sudo apt update


      - run:
          name: Deploy backend and run ansible
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run :
          name : test the container
          command : |
            machineip=`cat ~/project/.circleci/ansible/backendip.txt`
            curl $machineip:8080


workflows:
  Default:
    jobs:
      - build
      # - test : 
      #     requires:
      #       - build
      - publish-latest-docker-image : 
          requires:
            - build
      - deploy-infrastructure : 
          requires:
            - publish-latest-docker-image 
      - prepare-backend : 
          requires:
            - deploy-infrastructure
      - smoke-test : 
          requires:
            - prepare-backend